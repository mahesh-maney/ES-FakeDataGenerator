package com.elastcisearch.fakedatagenerator.fakedatagenerator;

import io.codearte.jfairy.Fairy;
import io.codearte.jfairy.producer.BaseProducer;
import io.codearte.jfairy.producer.DateProducer;
import io.codearte.jfairy.producer.net.NetworkProducer;
import io.codearte.jfairy.producer.person.Person;
import org.json.simple.JSONArray;

import java.io.*;


public class ElasticSearchFakeDataGenerator {

    private Fairy fairy = Fairy.create();
    private int counter = 0;
    private final String index = "{\"index\":{\"_index\":\"%s\",\"_type\":\"%s\",\"_id\":\"%s\"}}\n";
    private final String curlCMD = "curl -H \"Content-Type: application/x-ndjson\" -XPOST \"localhost:9200/%s/%s/_bulk?pretty&refresh\" --data-binary @\"%s\"";
    private final String fileName = "elasticsearchdata.json";
    private Person person = null;
    private DateProducer dp = null;
    private BaseProducer bp = null;
    private NetworkProducer np = null;

    public ElasticSearchFakeDataGenerator(){
        person = fairy.person();
        dp = fairy.dateProducer();
        bp = fairy.baseProducer();
        np = fairy.networkProducer();
    }

    public JSONArray generateData(int numLines, String index, String type){
        JSONArray jsonArray = new JSONArray();
        for(int i=0; i<numLines; i++){
            jsonArray.add(getIndexTag(index,type,i+1));
            jsonArray.add(generateTag());
        }
        return jsonArray;
    }

    private String generateTag(){
        String tag = "{" +
                "\"id\""                + ":"   + "\"" + getAutoGeneratedID()+ "\","            +
                "\"username\""          + ":"   + "\"" + person.getUsername()+ "\","            +
                "\"email_address\""     + ":"   + "\"" + person.getEmail()+ "\","               +
                "\"phone_number\""      + ":"   + "\"" + person.getTelephoneNumber()+ "\","     +
                "\"first_name\""        + ":"   + "\"" + person.getFirstName()+ "\","           +
                "\"last_name\""         + ":"   + "\"" + person.getLastName()+ "\","            +
                "\"middle_name\""       + ":"   + "\"" + person.getMiddleName()+ "\","          +
                "\"sex\""               + ":"   + "\"" + person.getSex().name()+ "\","         +
                "\"birthdate\""         + ":"   + "\"" + person.getDateOfBirth().toLocalDate().toString()+ "\", "           +
                "\"join_date\""         + ":"   + "\"" + dp.randomDateBetweenYearAndNow(2005).toString()+ "\","    +
                "\"previous_logins\""   + ":"   + "\"" + Integer.toString(bp.randomBetween(1,10000))+ "\","                 +
                "\"last_ip\""           + ":"   + "\"" + np.ipAddress()+ "\"" +
                "}\n";
        return tag;
    }

    private int getAutoGeneratedID() {
        return ++counter;
    }

    private String getIndexTag(final String indexName, final String type, final int docID){
        return String.format(index,indexName,type,docID);
    }

    public void generateFakeDataFile(){
        Writer writer = null;
        try {
            ElasticSearchFakeDataGenerator bd = new ElasticSearchFakeDataGenerator();
            JSONArray jsonArray = bd.generateData(10000,"paraamarsh","resume");
            StringWriter stringWriter = new StringWriter();
            jsonArray.writeJSONString(stringWriter);
            writer = new FileWriter(new File("c:\\tmp\\"+fileName));
            writer.write(stringWriter.toString());
            writer.write("\n");
            writer.flush();
        }catch(Exception ex){
            ex.printStackTrace();
        }finally {
            if(writer != null){
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                writer = null;
            }
        }
    }

    private void executeCURLCmd(){
        String curlCmd = constructCURLCommand("paraamarsh","resume");
        Runtime runtime = Runtime.getRuntime();
        try {
            runtime.exec(curlCmd);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String constructCURLCommand(final String indexName, final String type){
        String curlCmd = String.format(curlCMD,indexName, type,fileName);
        return curlCmd;
    }

    public static void main(String[] params){
        /*ElasticSearchFakeDataGenerator elasticSearchFakeDataGenerator = new ElasticSearchFakeDataGenerator();
        elasticSearchFakeDataGenerator.generateFakeDataFile();
        elasticSearchFakeDataGenerator.executeCURLCmd();*/


        StringWriter stringWriter = new StringWriter();


    }

}
